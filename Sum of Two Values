#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define str string
#define vi vector<int>
#define vll vector<long long>
#define vc vector<char>
#define vs vector<string>
#define pi pair<int, int>
#define vpi vector<pi>
#define vvi vector<vector<int>>
#define si set<int>
#define ins insert
#define pb(a) push_back(a)
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define rep(i, b) for (int i = 0; i < (b); i++)
using namespace std;
 
ll N = 1000000;
vll primes;
vll v(N, 1);
void sieve()
{
    v[0] == 0;
    v[1] == 0;
    ll maxN = N;
    for (int i = 2; i * i <= maxN; i++)
    {
        if (v[i] == 1)
        {
            for (int j = i * i; j <= maxN; j += i)
                v[j] = 0;
        }
    }
    for (int i = 2; i <= maxN; i++)
    {
        if (v[i] != 0)
        {
            primes.pb(i);
        }
    }
}
int factorial(int n)
{
    if (n == 0)
        return 1;
    return n * factorial(n - 1);
}
bool isPrime(ll n)
{
    if (n <= 1)
        return false;
    for (ll i = 2; i * i <= n; i++)
    {
        if (n % i == 0)
            return false;
    }
    return true;
}
void solve()
{
    int n, k;
    cin >> n >> k;
    vpi v;
    for (int i = 0; i < n; i++)
    {
        int x;
        cin >> x;
        v.pb(make_pair(x, i + 1));
    }
    sort(all(v));
    int left = 0;
    int right = n - 1;
    while (left < right)
    {
        if (v[left].first + v[right].first > k)
        {
            right--;
        }
        else if (v[left].first + v[right].first == k)
        {
            cout << v[left].second << " " << v[right].second << endl;
            return;
        }
        else
        {
            left++;
        }
    }
    cout << "IMPOSSIBLE" << endl;
}
 
int main()
{
 
    ll t;
    // cin >> t;
    t = 1;
    while (t--)
    {
        solve();
    }
    return 0;
